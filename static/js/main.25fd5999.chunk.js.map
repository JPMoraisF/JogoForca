{"version":3,"sources":["components/wordSelector.js","components/hangman.js","App.js","serviceWorker.js","index.js"],"names":["paises","countryPicker","Math","floor","random","length","toUpperCase","Hangman","props","resetButton","setState","mistake","guessed","Set","answer","state","handleGuess","bind","this","split","map","correct","has","evt","letter","target","value","console","log","st","add","includes","key","onClick","disabled","outcome","gameOver","maxGuess","isWinner","guessedWord","join","gameStat","generateButtons","className","Component","defaultProps","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mSAsMMA,EAAS,CACX,cACA,gBACA,UACA,WACA,UACA,SACA,mBACA,iBACA,UACA,YACA,UACA,YACA,UACA,aACA,UACA,WACA,QACA,UACA,SACA,QACA,eACA,UACA,uBACA,WACA,SACA,SACA,WACA,gBACA,UACA,QACA,aACA,cACA,UACA,SACA,QACA,cACA,QACA,QACA,QACA,SACA,cACA,UACA,kBACA,gBACA,SACA,kBACA,aACA,UACA,SACA,OACA,YACA,WACA,QACA,yBACA,UACA,aACA,YACA,UACA,YACA,iBACA,UACA,UACA,OACA,YACA,YACA,YACA,QACA,SACA,OACA,UACA,UACA,SACA,YACA,SACA,QACA,mBACA,eACA,QACA,WACA,UACA,QACA,QACA,YACA,MACA,SACA,UACA,WACA,SACA,SACA,UACA,QACA,WACA,SACA,UACA,SACA,UACA,QACA,WACA,aACA,YACA,aACA,UACA,SACA,WACA,OACA,QACA,WACA,WACA,aACA,SACA,UACA,aACA,aACA,WACA,SACA,WACA,aACA,UACA,QACA,QACA,YACA,QACA,UACA,UACA,gBACA,MACA,gBACA,QACA,SACA,mBACA,YACA,WACA,OACA,UACA,WACA,SACA,cACA,YACA,cACA,4BACA,kBACA,iCACA,uBACA,UACA,SACA,SACA,UACA,WACA,QACA,cACA,wBACA,cACA,sBACA,2BACA,YACA,UACA,aACA,SACA,YACA,QACA,UACA,YACA,cACA,QACA,eACA,SACA,WACA,WACA,YACA,cACA,WACA,cACA,OACA,QACA,oBACA,UACA,gBACA,UACA,SACA,UACA,SACA,UACA,cACA,UACA,WACA,YACA,SACA,SACA,YAGJ,SAASC,IACL,OAAOD,EAAOE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,SAASC,c,UCjYvDC,E,kDAKF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAqCVC,YAAc,WACV,EAAKC,SAAS,CACVC,QAAS,EACTC,QAAS,IAAIC,IACbC,OAAQb,OAxCZ,EAAKc,MAAQ,CACTJ,QAAS,EACTC,QAAS,IAAIC,IACbC,OAAQb,KAEZ,EAAKe,YAAc,EAAKA,YAAYC,KAAjB,gBAPJ,E,0DAUJ,IAAD,OACV,OAAOC,KAAKH,MAAMD,OAAOK,MAAM,IAAIC,KAAI,SAAAC,GAAO,OACzC,EAAKN,MAAMH,QAAQU,IAAID,GAAWA,EAAsB,MAAZA,EAAkB,IAAM,S,kCAGjEE,GACR,IAAIC,EAASD,EAAIE,OAAOC,MACxBC,QAAQC,IAAIL,GAEZL,KAAKR,UAAS,SAAAmB,GAAE,MAAK,CACjBjB,QAASiB,EAAGjB,QAAQkB,IAAIN,GACxBb,QAASkB,EAAGlB,SAAWkB,EAAGf,OAAOiB,SAASP,GAAU,EAAI,S,wCAI7C,IAAD,OACd,MAAO,6BAA6BL,MAAM,IAAIC,KAAI,SAAAI,GAAM,OACpD,4BACIQ,IAAKR,EACLE,MAAOF,EACPS,QAAS,EAAKjB,YACdkB,SAAU,EAAKnB,MAAMH,QAAQU,IAAIE,IAEhCA,Q,+BAcT,IAGIW,EAHEC,EAAWlB,KAAKH,MAAMJ,SAAWO,KAAKV,MAAM6B,SAC5CC,EAAWpB,KAAKqB,cAAcC,KAAK,MAAQtB,KAAKH,MAAMD,OACxD2B,EAAWvB,KAAKwB,kBAWpB,OATIJ,IACAG,EAAW,GACXN,EAAU,yBAEVC,IACAK,EAAW,GACXN,EAAU,4BAIV,yBAAKQ,UAAU,WACX,yBAAKA,UAAU,wBACX,4BACMP,GAAaE,EAAsDH,EAA3CjB,KAAKV,MAAM6B,SAAWnB,KAAKH,MAAMJ,SAE/D,uBAAGgC,UAAU,gBACPP,EAAgClB,KAAKH,MAAMD,OAAhCI,KAAKqB,gBAI1B,yBAAKI,UAAU,eACX,uBAAGA,UAAU,eAAeF,IAEhC,uBAAGE,UAAU,eACT,4BAAQA,UAAU,gBAAgBV,QAASf,KAAKT,aAAhD,c,GAhFEmC,aAAhBrC,EACKsC,aAAe,CAClBR,SAAU,GAuFH9B,QC9EAuC,MAbf,WACE,OACE,yBAAKH,UAAU,OACb,yBAAKI,GAAG,WACN,mDAEF,yBAAKA,GAAG,WACN,4BAAI,kBAAC,EAAD,UCCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.25fd5999.chunk.js","sourcesContent":["const countries = [\n    \"Afghanistan\",\n    \"Albania\",\n    \"Algeria\",\n    \"Andorra\",\n    \"Angola\",\n    \"Antigua\",\n    \"Argentina\",\n    \"Armenia\",\n    \"Australia\",\n    \"Austria\",\n    \"Azerbaijan\",\n    \"Bahamas\",\n    \"Bahrain\",\n    \"Bangladesh\",\n    \"Barbados\",\n    \"Belarus\",\n    \"Belgium\",\n    \"Belize\",\n    \"Benin\",\n    \"Bhutan\",\n    \"Bolivia\",\n    \"Bosnia\",\n    \"Botswana\",\n    \"Brazil\",\n    \"Brunei\",\n    \"Bulgaria\",\n    \"Burkina Faso\",\n    \"Burundi\",\n    \"Ivory Coast\",\n    \"Cabo Verde\",\n    \"Cambodia\",\n    \"Cameroon\",\n    \"Canada\",\n    \"Central African Republic\",\n    \"Chad\",\n    \"Chile\",\n    \"China\",\n    \"Colombia\",\n    \"Comoros\",\n    \"Congo\",\n    \"Costa Rica\",\n    \"Croatia\",\n    \"Cuba\",\n    \"Cyprus\",\n    \"Czech\",\n    \"Democratic Republic of the Congo\",\n    \"Denmark\",\n    \"Djibouti\",\n    \"Dominica\",\n    \"Dominican Republic\",\n    \"Ecuador\",\n    \"Egypt\",\n    \"El Salvador\",\n    \"Equatorial Guinea\",\n    \"Eritrea\",\n    \"Estonia\",\n    \"Eswatini\",\n    \"Ethiopia\",\n    \"Fiji\",\n    \"Finland\",\n    \"France\",\n    \"Gabon\",\n    \"Gambia\",\n    \"Georgia\",\n    \"Germany\",\n    \"Ghana\",\n    \"Greece\",\n    \"Grenada\",\n    \"Guatemala\",\n    \"Guinea\",\n    \"Guinea-Bissau\",\n    \"Guyana\",\n    \"Haiti\",\n    \"Holy See\",\n    \"Honduras\",\n    \"Hungary\",\n    \"Iceland\",\n    \"India\",\n    \"Indonesia\",\n    \"Iran\",\n    \"Iraq\",\n    \"Ireland\",\n    \"Israel\",\n    \"Italy\",\n    \"Jamaica\",\n    \"Japan\",\n    \"Jordan\",\n    \"Kazakhstan\",\n    \"Kenya\",\n    \"Kiribati\",\n    \"Kuwait\",\n    \"Kyrgyzstan\",\n    \"Laos\",\n    \"Latvia\",\n    \"Lebanon\",\n    \"Lesotho\",\n    \"Liberia\",\n    \"Libya\",\n    \"Liechtenstein\",\n    \"Lithuania\",\n    \"Luxembourg\",\n    \"Madagascar\",\n    \"Malawi\",\n    \"Malaysia\",\n    \"Maldives\",\n    \"Mali\",\n    \"Malta\",\n    \"Mauritania\",\n    \"Mauritius\",\n    \"Mexico\",\n    \"Micronesia\",\n    \"Moldova\",\n    \"Monaco\",\n    \"Mongolia\",\n    \"Montenegro\",\n    \"Morocco\",\n    \"Mozambique\",\n    \"Myanmar\",\n    \"Namibia\",\n    \"Nauru\",\n    \"Nepal\",\n    \"Netherlands\",\n    \"New Zealand\",\n    \"Nicaragua\",\n    \"Niger\",\n    \"Nigeria\",\n    \"North Korea\",\n    \"North Macedonia\",\n    \"Norway\",\n    \"Oman\",\n    \"Pakistan\",\n    \"Palau\",\n    \"Palestine State\",\n    \"Panama\",\n    \"Papua New Guinea\",\n    \"Paraguay\",\n    \"Peru\",\n    \"Philippines\",\n    \"Poland\",\n    \"Portugal\",\n    \"Qatar\",\n    \"Romania\",\n    \"Russia\",\n    \"Rwanda\",\n    \"Saint Kitts and Nevis\",\n    \"Saint Lucia\",\n    \"Saint Vincent and the Grenadines\",\n    \"Samoa\",\n    \"San Marino\",\n    \"Sao Tome and Principe\",\n    \"Saudi Arabia\",\n    \"Senegal\",\n    \"Serbia\",\n    \"Seychelles\",\n    \"Sierra Leone\",\n    \"Singapore\",\n    \"Slovakia\",\n    \"Slovenia\",\n    \"Solomon Islands\",\n    \"Somalia\",\n    \"South Africa\",\n    \"South Korea\",\n    \"South Sudan\",\n    \"Spain\",\n    \"Sri Lanka\",\n    \"Sudan\",\n    \"Suriname\",\n    \"Sweden\",\n    \"Switzerland\",\n    \"Syria\",\n    \"Tajikistan\",\n    \"Tanzania\",\n    \"Thailand\",\n    \"Timor-Leste\",\n    \"Togo\",\n    \"Tonga\",\n    \"Trinidad and Tobago\",\n    \"Tunisia\",\n    \"Turkey\",\n    \"Turkmenistan\",\n    \"Tuvalu\",\n    \"Uganda\",\n    \"Ukraine\",\n    \"United Arab Emirates\",\n    \"United Kingdom\",\n    \"United States of America\",\n    \"Uruguay\",\n    \"Uzbekistan\",\n    \"Vanuatu\",\n    \"Venezuela\",\n    \"Vietnam\",\n    \"Yemen\",\n    \"Zambia\",\n    \"Zimbabwe\"\n\n]\n\nconst paises = [\n    \"Afeganistao\",\n    \"africa do Sul\",\n    \"Albania\",\n    \"Alemanha\",\n    \"Andorra\",\n    \"Angola\",\n    \"Antiga e Barbuda\",\n    \"Arabia Saudita\",\n    \"Argelia\",\n    \"Argentina\",\n    \"Armenia\",\n    \"Australia\",\n    \"austria\",\n    \"Azerbaijao\",\n    \"Bahamas\",\n    \"Barbados\",\n    \"Barem\",\n    \"Belgica\",\n    \"Belize\",\n    \"Benim\",\n    \"Bielorrussia\",\n    \"Bolivia\",\n    \"Bosnia e Herzegovina\",\n    \"Botsuana\",\n    \"Brasil\",\n    \"Brunei\",\n    \"Bulgaria\",\n    \"Burquina Faso\",\n    \"Burundi\",\n    \"Butao\",\n    \"Cabo Verde\",\n    \"Camarões\",\n    \"Camboja\",\n    \"Canada\",\n    \"Catar\",\n    \"Cazaquistao\",\n    \"Chade\",\n    \"Chile\",\n    \"China\",\n    \"Chipre\",\n    \"Colômbia\",\n    \"Comores\",\n    \"Coreia do Norte\",\n    \"Coreia do Sul\",\n    \"Cosovo\",\n    \"Costa do Marfim\",\n    \"Costa Rica\",\n    \"Croacia\",\n    \"Cuaite\",\n    \"Cuba\",\n    \"Dinamarca\",\n    \"Dominica\",\n    \"Egito\",\n    \"Emirados arabes Unidos\",\n    \"Equador\",\n    \"Eslovaquia\",\n    \"Eslovenia\",\n    \"Espanha\",\n    \"Palestina\",\n    \"Estados Unidos\",\n    \"Estonia\",\n    \"Etiopia\",\n    \"Fiji\",\n    \"Filipinas\",\n    \"Finlandia\",\n    \"França\",\n    \"Gabao\",\n    \"Gambia\",\n    \"Gana\",\n    \"Georgia\",\n    \"Granada\",\n    \"Grecia\",\n    \"Guatemala\",\n    \"Guiana\",\n    \"Guine\",\n    \"Guine Equatorial\",\n    \"Guine Bissau\",\n    \"Haiti\",\n    \"Honduras\",\n    \"Hungria\",\n    \"Iemen\",\n    \"india\",\n    \"Indonesia\",\n    \"Ira\",\n    \"Iraque\",\n    \"Irlanda\",\n    \"Islandia\",\n    \"Israel\",\n    \"Italia\",\n    \"Jamaica\",\n    \"Japao\",\n    \"Jordania\",\n    \"Lesoto\",\n    \"Letonia\",\n    \"Libano\",\n    \"Liberia\",\n    \"Libia\",\n    \"Lituania\",\n    \"Luxemburgo\",\n    \"Macedonia\",\n    \"Madagascar\",\n    \"Malasia\",\n    \"Malaui\",\n    \"Maldivas\",\n    \"Mali\",\n    \"Malta\",\n    \"Marrocos\",\n    \"Mauricia\",\n    \"Mauritania\",\n    \"Mexico\",\n    \"Mianmar\",\n    \"Micronesia\",\n    \"Mocambique\",\n    \"Moldavia\",\n    \"Monaco\",\n    \"Mongolia\",\n    \"Montenegro\",\n    \"Namibia\",\n    \"Nauru\",\n    \"Nepal\",\n    \"Nicaragua\",\n    \"Niger\",\n    \"Nigeria\",\n    \"Noruega\",\n    \"Nova Zelandia\",\n    \"Oma\",\n    \"Paises Baixos\",\n    \"Palau\",\n    \"Panama\",\n    \"Papua Nova Guine\",\n    \"Paquistao\",\n    \"Paraguai\",\n    \"Peru\",\n    \"Polonia\",\n    \"Portugal\",\n    \"Quenia\",\n    \"Quirguistao\",\n    \"Quiribati\",\n    \"Reino Unido\",\n    \"Republica Centro Africana\",\n    \"Republica Checa\",\n    \"Republica Democratica do Congo\",\n    \"Republica Dominicana\",\n    \"Romenia\",\n    \"Ruanda\",\n    \"Russia\",\n    \"Salomao\",\n    \"Salvador\",\n    \"Samoa\",\n    \"Santa Lucia\",\n    \"Sao Cristovao e Neves\",\n    \"Sao Marinho\",\n    \"Sao Tome e Principe\",\n    \"Sao Vicente e Granadinas\",\n    \"Seicheles\",\n    \"Senegal\",\n    \"Serra Leoa\",\n    \"Servia\",\n    \"Singapura\",\n    \"Siria\",\n    \"Somalia\",\n    \"Sri Lanca\",\n    \"Suazilandia\",\n    \"Sudao\",\n    \"Sudao do Sul\",\n    \"Suecia\",\n    \"Suiça\",\n    \"Suriname\",\n    \"Tailandia\",\n    \"Tajiquistao\",\n    \"Tanzania\",\n    \"Timor Leste\",\n    \"Togo\",\n    \"Tonga\",\n    \"Trindade e Tobago\",\n    \"Tunisia\",\n    \"Turcomenistao\",\n    \"Turquia\",\n    \"Tuvalu\",\n    \"Ucrania\",\n    \"Uganda\",\n    \"Uruguai\",\n    \"Usbequistao\",\n    \"Vanuatu\",\n    \"Vaticano\",\n    \"Venezuela\",\n    \"Vietna\",\n    \"Zambia\",\n    \"Zimbabue\"\n]\n\nfunction countryPicker() {\n    return paises[Math.floor(Math.random() * paises.length)].toUpperCase();\n}\n\nexport { countryPicker };","import React, { Component } from 'react';\nimport {countryPicker} from './wordSelector';\n\nimport '../styles/hangman.css'\n\n\nclass Hangman extends Component {\n    static defaultProps = {\n        maxGuess: 5\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            mistake: 0,\n            guessed: new Set(),\n            answer: countryPicker()\n        };\n        this.handleGuess = this.handleGuess.bind(this);\n    }\n\n    guessedWord() {        \n        return this.state.answer.split(\"\").map(correct => \n            (this.state.guessed.has(correct) ? correct : correct === \" \" ? \" \" : \"_\"));\n    }\n\n    handleGuess(evt) {\n        let letter = evt.target.value;\n        console.log(evt);\n        \n        this.setState(st => ({\n            guessed: st.guessed.add(letter),\n            mistake: st.mistake + (st.answer.includes(letter) ? 0 : 1)\n        }));\n    }\n\n    generateButtons() {\n        return \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\").map(letter => (\n            <button\n                key={letter}\n                value={letter}\n                onClick={this.handleGuess}\n                disabled={this.state.guessed.has(letter)}\n            >\n                {letter}\n            </button>\n        ));\n    }\n\n    resetButton = () => {\n        this.setState({\n            mistake: 0,\n            guessed: new Set(),\n            answer: countryPicker()\n        });\n    }\n\n    render() {\n        const gameOver = this.state.mistake >= this.props.maxGuess;\n        const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n        let gameStat = this.generateButtons();\n        let outcome;\n        if (isWinner) {\n            gameStat = \"\";\n            outcome = \"Parabens 🙂\"\n        }\n        if (gameOver) {\n            gameStat = \"\";\n            outcome = \"Voce perdeu 🙁\"\n        }\n\n        return (\n            <div className='Hangman'>\n                <div className='top-part text-center'>\n                    <h1>\n                        {!gameOver && !isWinner ? this.props.maxGuess - this.state.mistake : outcome}\n                    </h1>\n                    <p className='Hangman-word'>\n                        {!gameOver ? this.guessedWord() : this.state.answer}\n                    </p>\n                </div>\n\n                <div className='bottom-part'>\n                    <p className='text-center'>{gameStat}</p>\n                </div>\n                <p className='text-center'>\n                    <button className='Hangman-reset' onClick={this.resetButton}>\n                       Novo\n\t\t\t\t\t</button>\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default Hangman;","import React from 'react';\nimport './styles/App.css';\nimport Hangman  from './components/hangman';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div id=\"section\">\n        <h1>Adivinhe o país</h1>\n      </div>\n      <div id=\"section\">\n        <h1><Hangman/></h1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}